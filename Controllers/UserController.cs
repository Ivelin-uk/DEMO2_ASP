using Microsoft.AspNetCore.Mvc;
using MyMvcApp.Data;         // ‚úÖ —Ç–æ–≤–∞ —Ç–∏ –¥–∞–≤–∞ –¥–æ—Å—Ç—ä–ø –¥–æ AppDbContext
using MyMvcApp.Models;       // ‚úÖ —Ç–æ–≤–∞ —Ç–∏ –¥–∞–≤–∞ –¥–æ—Å—Ç—ä–ø –¥–æ User
using Microsoft.EntityFrameworkCore;

namespace MyMvcApp.Controllers
{
    public class UserController : Controller
    {
        // ‚úÖ –¢–£–ö –î–ï–§–ò–ù–ò–†–ê–ú–ï _context
        private readonly AppDbContext _context;

        // ‚úÖ –¢–£–ö –ì–û –ü–û–õ–£–ß–ê–í–ê–ú–ï —á—Ä–µ–∑ Dependency Injection
        public UserController(AppDbContext context)
        {
            _context = context;
        }

        // üëâ GET: /User/Register
        public IActionResult Register()
        {
            return View();
        }

        [HttpPost]
        public async Task<IActionResult> Register(User user)
        {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –∏–º–µ–π–ª—ä—Ç –≤–µ—á–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
            if (await _context.Users.AnyAsync(u => u.Email == user.Email))
            {
                ModelState.AddModelError("Email", "–ò–º–µ–π–ª—ä—Ç –≤–µ—á–µ –µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–∞–Ω.");
                return View(user);
            }

            if (ModelState.IsValid)
            {
                _context.Users.Add(user);
                await _context.SaveChangesAsync();
                return RedirectToAction("Login", "User");
            }

            return View(user);
        }

         // üëâ GET: /User/Register
        public IActionResult Login()
        {
            return View();
        }

        // üëâ POST: /User/Login
        [HttpPost]
        public async Task<IActionResult> Login(string email, string password)
        {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—â –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª —Å –≤—ä–≤–µ–¥–µ–Ω–∏—è –∏–º–µ–π–ª –∏ –ø–∞—Ä–æ–ª–∞
            var user = await _context.Users.FirstOrDefaultAsync(u => u.Email == email && u.Password == password);
            if (user == null)
            {
                // –ê–∫–æ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω, –¥–æ–±–∞–≤—è–º–µ –≥—Ä–µ—à–∫–∞ –≤ ModelState
                ModelState.AddModelError(string.Empty, "–ù–µ–≤–∞–ª–∏–¥–µ–Ω –∏–º–µ–π–ª –∏–ª–∏ –ø–∞—Ä–æ–ª–∞.");
                return View();
            }

            // –°—ä—Ö—Ä–∞–Ω—è–≤–∞–Ω–µ –Ω–∞ –∏–º–µ—Ç–æ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è –≤ —Å–µ—Å–∏—è—Ç–∞
            HttpContext.Session.SetString("UserName", $"{user.FirstName} {user.LastName}");

            // –ü—Ä–µ–Ω–∞—Å–æ—á–≤–∞–Ω–µ –∫—ä–º —Å–ø–∏—Å—ä–∫–∞ —Å –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏
            return RedirectToAction("Users", "User");
        }

        // üëâ GET: /User/Logout
        public IActionResult Logout()
        {
            // –ò–∑—á–∏—Å—Ç–≤–∞–Ω–µ –Ω–∞ —Å–µ—Å–∏—è—Ç–∞
            HttpContext.Session.Clear();

            // –ü—Ä–µ–Ω–∞—Å–æ—á–≤–∞–Ω–µ –∫—ä–º —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞ –∑–∞ –ª–æ–≥–≤–∞–Ω–µ
            return RedirectToAction("Login", "User");
        }

        // üëâ –°–ø–∏—Å—ä–∫ —Å –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏
        public async Task<IActionResult> Users()
        {
             // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –µ –ª–æ–≥–Ω–∞—Ç
            if (HttpContext.Session.GetString("UserName") == null)
            {
                return RedirectToAction("Login", "User");
            }

            var users = await _context.Users.ToListAsync();

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –∏–º–∞ –¥–∞–Ω–Ω–∏
            if (users == null || !users.Any())
            {
                return Content("–ù—è–º–∞ –Ω–∞–ª–∏—á–Ω–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏ –≤ –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏.");
            }

            return View(users);
        }

        [HttpPost]
        public async Task<IActionResult> Delete(int id)
        {
            var user = await _context.Users.FindAsync(id);
            if (user == null)
            {
                return NotFound();
            }

            _context.Users.Remove(user);
            await _context.SaveChangesAsync();

            return RedirectToAction("Users","User");
        }

        // üëâ GET: /User/Edit/{id}
        public async Task<IActionResult> Edit(int id)
        {
            var user = await _context.Users.FindAsync(id);
            if (user == null)
            {
                return NotFound();
            }

            return View(user);
        }

        [HttpPost]
        public async Task<IActionResult> Edit(int id, User updatedUser)
        {
            if (id != updatedUser.Id)
            {
                return BadRequest();
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –∏–º–µ–π–ª—ä—Ç –≤–µ—á–µ –µ –∑–∞–ø–∏—Å–∞–Ω –∑–∞ –¥—Ä—É–≥ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª
            if (await _context.Users.AnyAsync(u => u.Email == updatedUser.Email && u.Id != updatedUser.Id))
            {
                ModelState.AddModelError("Email", "–ò–º–µ–π–ª—ä—Ç –≤–µ—á–µ –µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–∞–Ω –∑–∞ –¥—Ä—É–≥ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª.");
                return View(updatedUser);
            }

            if (ModelState.IsValid)
            {
                try
                {
                    _context.Update(updatedUser);
                    await _context.SaveChangesAsync();
                    return RedirectToAction("Users");
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!_context.Users.Any(u => u.Id == id))
                    {
                        return NotFound();
                    }
                    throw;
                }
            }

            return View(updatedUser);
        }
    }
}
