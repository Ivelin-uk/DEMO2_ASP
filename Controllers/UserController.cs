using Microsoft.AspNetCore.Mvc;
using MyMvcApp.Data;         // ‚úÖ —Ç–æ–≤–∞ —Ç–∏ –¥–∞–≤–∞ –¥–æ—Å—Ç—ä–ø –¥–æ AppDbContext
using MyMvcApp.Models;       // ‚úÖ —Ç–æ–≤–∞ —Ç–∏ –¥–∞–≤–∞ –¥–æ—Å—Ç—ä–ø –¥–æ User
using Microsoft.EntityFrameworkCore;
using BCrypt.Net;

namespace MyMvcApp.Controllers
{
    public class UserController : Controller
    {
        // ‚úÖ –¢–£–ö –î–ï–§–ò–ù–ò–†–ê–ú–ï _context
        private readonly AppDbContext _context;

        // ‚úÖ –¢–£–ö –ì–û –ü–û–õ–£–ß–ê–í–ê–ú–ï —á—Ä–µ–∑ Dependency Injection
        public UserController(AppDbContext context)
        {
            _context = context;
        }

        // üëâ GET: /User/Register
        public IActionResult Register()
        {
            return View();
        }

        [HttpPost]
        public async Task<IActionResult> Register(User user)
        {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –∏–º–µ–π–ª—ä—Ç –≤–µ—á–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
            // if (await _context.Users.AnyAsync(u => u.Email == user.Email))
            // {
            //     ModelState.AddModelError("Email", "–ò–º–µ–π–ª—ä—Ç –≤–µ—á–µ –µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–∞–Ω.");
            //     return View(user);
            // }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—Ç–∞ –Ω–∞ –º–æ–¥–µ–ª–∞
            if (!ModelState.IsValid)
            {
                return View(user);
            }

            try
            {
                user.Password = BCrypt.Net.BCrypt.HashPassword(user.Password);

                _context.Users.Add(user);
                await _context.SaveChangesAsync();

                // –°—ä–æ–±—â–µ–Ω–∏–µ –∑–∞ —É—Å–ø–µ—à–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–∞–Ω–µ
                TempData["SuccessMessage"] = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è—Ç–∞ –±–µ—à–µ —É—Å–ø–µ—à–Ω–∞! –ú–æ–ª—è, –≤–ª–µ–∑—Ç–µ –≤ –ø—Ä–æ—Ñ–∏–ª–∞ —Å–∏.";

                // –ü—Ä–µ–Ω–∞—Å–æ—á–≤–∞–Ω–µ –∫—ä–º —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞ –∑–∞ –ª–æ–≥–≤–∞–Ω–µ
                return RedirectToAction("Login", "User");
            }
            catch (Exception ex)
            {
                // –õ–æ–≥–≤–∞–Ω–µ –Ω–∞ –≥—Ä–µ—à–∫–∞—Ç–∞ (–ø–æ –∂–µ–ª–∞–Ω–∏–µ)
                Console.WriteLine($"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {ex.Message}");

                // –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –≥—Ä–µ—à–∫–∞ –≤ ModelState
                ModelState.AddModelError(string.Empty, "–í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è—Ç–∞. –ú–æ–ª—è, –æ–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ.");
                return View(user);
            }
        }

         // üëâ GET: /User/Register
        public IActionResult Login()
        {
            return View();
        }

       [HttpPost]
        public async Task<IActionResult> Login(string email, string password)
        {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—â –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª —Å –≤—ä–≤–µ–¥–µ–Ω–∏—è –∏–º–µ–π–ª
            var user = await _context.Users.FirstOrDefaultAsync(u => u.Email == email);
            if (user == null || !BCrypt.Net.BCrypt.Verify(password, user.Password))
            {
                // –ê–∫–æ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª–∞—Ç–∞ –Ω–µ —Å—ä–≤–ø–∞–¥–∞
                ModelState.AddModelError(string.Empty, "–ì—Ä–µ—à–µ–Ω –∏–º–µ–π–ª –∏–ª–∏ –ø–∞—Ä–æ–ª–∞. –ú–æ–ª—è, –æ–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ.");
                return View();
            }

            // –°—ä—Ö—Ä–∞–Ω—è–≤–∞–Ω–µ –Ω–∞ –∏–º–µ—Ç–æ –∏ —Ä–æ–ª—è—Ç–∞ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è –≤ —Å–µ—Å–∏—è—Ç–∞
            HttpContext.Session.SetString("UserName", $"{user.FirstName} {user.LastName}");
            HttpContext.Session.SetString("UserRole", user.Role);

            // –ü—Ä–µ–Ω–∞—Å–æ—á–≤–∞–Ω–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç –æ—Ç —Ä–æ–ª—è—Ç–∞
            return RedirectToAction("Index", "Home");
        }

        // üëâ GET: /User/Logout
        public IActionResult Logout()
        {
            // –ò–∑—á–∏—Å—Ç–≤–∞–Ω–µ –Ω–∞ —Å–µ—Å–∏—è—Ç–∞
            HttpContext.Session.Clear();

            // –ü—Ä–µ–Ω–∞—Å–æ—á–≤–∞–Ω–µ –∫—ä–º —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞ –∑–∞ –ª–æ–≥–≤–∞–Ω–µ
            return RedirectToAction("Login", "User");
        }

        // üëâ –°–ø–∏—Å—ä–∫ —Å –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏
        public async Task<IActionResult> Users()
        {
             // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –µ –ª–æ–≥–Ω–∞—Ç
            if (HttpContext.Session.GetString("UserName") == null)
            {
                return RedirectToAction("Login", "User");
            }

            var users = await _context.Users.ToListAsync();

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –∏–º–∞ –¥–∞–Ω–Ω–∏
            if (users == null || !users.Any())
            {
                return Content("–ù—è–º–∞ –Ω–∞–ª–∏—á–Ω–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏ –≤ –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏.");
            }

            return View(users);
        }

        [HttpPost]
        public async Task<IActionResult> Delete(int id)
        {
            var user = await _context.Users.FindAsync(id);
            if (user == null)
            {
                return NotFound();
            }

            _context.Users.Remove(user);
            await _context.SaveChangesAsync();

            return RedirectToAction("Users","User");
        }

        // üëâ GET: /User/Edit/{id}
        public async Task<IActionResult> Edit(int id)
        {
            var user = await _context.Users.FindAsync(id);
            if (user == null)
            {
                return NotFound();
            }

            return View(user);
        }

        [HttpPost]
        public async Task<IActionResult> Edit(int id, User updatedUser)
        {
            if (id != updatedUser.Id)
            {
                return BadRequest();
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –∏–º–µ–π–ª—ä—Ç –≤–µ—á–µ –µ –∑–∞–ø–∏—Å–∞–Ω –∑–∞ –¥—Ä—É–≥ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª
            if (await _context.Users.AnyAsync(u => u.Email == updatedUser.Email && u.Id != updatedUser.Id))
            {
                ModelState.AddModelError("Email", "–ò–º–µ–π–ª—ä—Ç –≤–µ—á–µ –µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–∞–Ω –∑–∞ –¥—Ä—É–≥ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª.");
                return View(updatedUser);
            }

            if (ModelState.IsValid)
            {
                try
                {
                    _context.Update(updatedUser);
                    await _context.SaveChangesAsync();
                    return RedirectToAction("Users");
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!_context.Users.Any(u => u.Id == id))
                    {
                        return NotFound();
                    }
                    throw;
                }
            }

            return View(updatedUser);
        }

        
        public IActionResult Profil()
        {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –µ –ª–æ–≥–Ω–∞—Ç
            if (HttpContext.Session.GetString("UserName") == null)
            {
                return RedirectToAction("Login", "User");
            }

            // –ò–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç —Å–µ—Å–∏—è—Ç–∞
            var userName = HttpContext.Session.GetString("UserName");
            var userRole = HttpContext.Session.GetString("UserRole");

            // –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ ViewData –∑–∞ –ø—Ä–µ–¥–∞–≤–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ –∫—ä–º –∏–∑–≥–ª–µ–¥–∞
            ViewData["UserName"] = userName;
            ViewData["UserRole"] = userRole;

            return View();
        }

    }
}
